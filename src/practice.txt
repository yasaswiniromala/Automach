import React, { useState, useEffect } from "react";
import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Button,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  TextField,
  Select,
  MenuItem,
  TablePagination,
  Chip,
} from "@mui/material";
import axios from "axios";
import dayjs from "dayjs"; // Importing dayjs for date formatting

const Sales = () => {
  const [sales, setSales] = useState([]);
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(5);
  const [editSale, setEditSale] = useState(null);
  const [openAdd, setOpenAdd] = useState(false);
  const [openEdit, setOpenEdit] = useState(false);
  const [formData, setFormData] = useState({});
  const [newSale, setNewSale] = useState({
    customerName: "",
    orderDecision: "",
    orderStatus: "",
    productIds: [],
    quantities: [],
    orderCreatedDate: "",
    orderDeliveryDate: "",
  });

  // Fetch sales from the backend
  useEffect(() => {
    axios
      .get("http://localhost:8080/api/sales")
      .then((response) => setSales(response.data))
      .catch((error) => console.error(error));
  }, []);

  // Handle page change
  const handleChangePage = (event, newPage) => {
    setPage(newPage);
  };

  // Handle rows per page change
  const handleChangeRowsPerPage = (event) => {
    setRowsPerPage(+event.target.value);
    setPage(0);
  };

  // Handle delete sale
  const handleDelete = (saleId) => {
    axios
      .delete(`http://localhost:8080/api/sales/${saleId}`)
      .then(() => {
        setSales(sales.filter((sale) => sale.id !== saleId));
      })
      .catch((error) => console.error(error));
  };

  // Handle opening add dialog
  const handleOpenAdd = () => setOpenAdd(true);

  // Handle closing add dialog
  const handleCloseAdd = () => setOpenAdd(false);

  // Handle opening edit dialog
  const handleEdit = (sale) => {
    setEditSale(sale);
    setFormData(sale);
    setOpenEdit(true);
  };

  // Handle closing edit dialog
  const handleCloseEdit = () => setOpenEdit(false);

  // Handle input change for forms
  const handleChange = (event) => {
    const { name, value } = event.target;
    setFormData((prevFormData) => ({ ...prevFormData, [name]: value }));
  };

  // Handle saving an edited sale
  const handleSave = () => {
    // Convert quantities to array if not already
    const updatedSale = {
      ...formData,
      quantities: Array.isArray(formData.quantities)
        ? formData.quantities
        : formData.quantities.split(",").map(Number),
    };

    axios
      .put(`http://localhost:8080/api/sales/${editSale.id}`, updatedSale)
      .then((response) => {
        const updatedSales = sales.map((sale) =>
          sale.id === editSale.id ? response.data : sale
        );
        setSales(updatedSales);
        handleCloseEdit();
      })
      .catch((error) => console.error(error));
  };

  // Handle adding a new sale
  const handleAddOrder = () => {
    axios
      .post("http://localhost:8080/api/sales", newSale)
      .then((response) => {
        setSales([...sales, response.data]); // Use response data for consistency
        handleCloseAdd();
      })
      .catch((error) => console.error(error));
  };

  return (
    <Paper>
      <Button variant="contained" onClick={handleOpenAdd}>
        Add New Order
      </Button>

      <TableContainer>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>Customer Name</TableCell>
              <TableCell>Order Decision</TableCell>
              <TableCell>Order Status</TableCell>
              <TableCell>Products</TableCell>
              <TableCell>Quantities</TableCell>
              <TableCell>Order Created Date</TableCell>
              <TableCell>Order Delivery Date</TableCell>
              <TableCell>Actions</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {sales
              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)
              .map((sale) => (
                <TableRow key={sale.id}>
                  <TableCell>{sale.customerName}</TableCell>
                  <TableCell>
                    <Chip
                      label={sale.orderDecision}
                      color={
                        sale.orderDecision === "pending"
                          ? "warning"
                          : sale.orderDecision === "shipped"
                          ? "primary"
                          : "success"
                      }
                    />
                  </TableCell>
                  <TableCell>
                    <Chip
                      label={sale.orderStatus}
                      color={
                        sale.orderStatus === "pending"
                          ? "warning"
                          : sale.orderStatus === "shipped"
                          ? "primary"
                          : "success"
                      }
                    />
                  </TableCell>
                  <TableCell>
                    {sale.products.map((product) => (
                      <div key={product.prodId}>{product.prodName}</div> // Added key
                    ))}
                  </TableCell>
                  <TableCell>{sale.quantities.join(", ")}</TableCell>
                  <TableCell>
                    {dayjs(sale.orderCreatedDate).format("YYYY-MM-DD HH:mm:ss")}
                  </TableCell>
                  <TableCell>
                    {dayjs(sale.orderDeliveryDate).format("YYYY-MM-DD HH:mm:ss")}
                  </TableCell>
                  <TableCell>
                    <Button onClick={() => handleEdit(sale)}>Edit</Button>
                    <Button onClick={() => handleDelete(sale.id)}>Delete</Button>
                  </TableCell>
                </TableRow>
              ))}
          </TableBody>
        </Table>
      </TableContainer>
      <TablePagination
        rowsPerPageOptions={[5, 10, 25]}
        component="div"
        count={sales.length}
        rowsPerPage={rowsPerPage}
        page={page}
        onPageChange={handleChangePage}
        onRowsPerPageChange={handleChangeRowsPerPage}
      />

      {/* Add Sale Dialog */}
      <Dialog open={openAdd} onClose={handleCloseAdd}>
        <DialogTitle>Add New Sale</DialogTitle>
        <DialogContent>
          <TextField
            margin="dense"
            label="Customer Name"
            name="customerName"
            fullWidth
            onChange={(e) =>
              setNewSale({ ...newSale, customerName: e.target.value })
            }
          />
          <TextField
            margin="dense"
            label="Order Decision"
            name="orderDecision"
            fullWidth
            onChange={(e) =>
              setNewSale({ ...newSale, orderDecision: e.target.value })
            }
          />
          <Select
            fullWidth
            value={newSale.orderStatus}
            onChange={(e) =>
              setNewSale({ ...newSale, orderStatus: e.target.value })
            }
            variant="outlined"
            sx={{ mt: 2 }}
          >
            <MenuItem value="pending">Pending</MenuItem>
            <MenuItem value="shipped">Shipped</MenuItem>
            <MenuItem value="delivered">Delivered</MenuItem>
          </Select>
          <TextField
            margin="dense"
            label="Product IDs (Comma Separated)"
            name="productIds"
            fullWidth
            onChange={(e) =>
              setNewSale({
                ...newSale,
                productIds: e.target.value.split(",").map(Number),
              })
            }
          />
          <TextField
            margin="dense"
            label="Quantities (Comma Separated)"
            name="quantities"
            fullWidth
            onChange={(e) =>
              setNewSale({
                ...newSale,
                quantities: e.target.value.split(",").map(Number),
              })
            }
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseAdd}>Cancel</Button>
          <Button onClick={handleAddOrder}>Add Sale</Button>
        </DialogActions>
      </Dialog>

      {/* Edit Sale Dialog */}
      <Dialog open={openEdit} onClose={handleCloseEdit}>
        <DialogTitle>Edit Sale</DialogTitle>
        <DialogContent>
          <TextField
            margin="dense"
            label="Customer Name"
            name="customerName"
            value={formData.customerName}
            onChange={handleChange}
            fullWidth
          />
          <TextField
            margin="dense"
            label="Order Decision"
            name="orderDecision"
            value={formData.orderDecision}
            onChange={handleChange}
            fullWidth
          />
          <Select
            fullWidth
            value={formData.orderStatus}
            onChange={handleChange}
            variant="outlined"
            sx={{ mt: 2 }}
          >
            <MenuItem value="pending">Pending</MenuItem>
            <MenuItem value="shipped">Shipped</MenuItem>
            <MenuItem value="delivered">Delivered</MenuItem>
          </Select>
          <TextField
            margin="dense"
            label="Product IDs (Comma Separated)"
            name="productIds"
            value={formData.productIds.join(", ")}
            onChange={handleChange}
            fullWidth
          />
          <TextField
            margin="dense"
            label="Quantities (Comma Separated)"
            name="quantities"
            value={formData.quantities.join(", ")}
            onChange={handleChange}
            fullWidth
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseEdit}>Cancel</Button>
          <Button onClick={handleSave}>Save Changes</Button>
        </DialogActions>
      </Dialog>
    </Paper>
  );
};

export default Sales;
